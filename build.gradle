buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'scala'
    id 'application'
    id 'distribution'
    id 'maven-publish'
    id 'jacoco' // code coverage
    id "com.adarshr.test-logger" version "2.1.1" // beautify test logs
    id "com.github.johnrengelman.shadow" version "6.1.0" // fatJAR
}

group = 'nlp_4iz470'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

def scalaToolsVersion = '2.11'
def scalaVersion = '2.11.12'
def sparkVersion = '2.4.7'

repositories {
    mavenCentral()
}

application {
    mainClassName = 'nlp_4iz470.Main'
}

dependencies {
    implementation "org.slf4j:slf4j-log4j12:1.7.25"
    implementation "org.scala-lang:scala-library:$scalaVersion"
    implementation "org.apache.spark:spark-core_$scalaToolsVersion:$sparkVersion"
    implementation "org.apache.spark:spark-mllib_$scalaToolsVersion:$sparkVersion"
    implementation "org.apache.spark:spark-sql_$scalaToolsVersion:$sparkVersion"
    implementation 'com.typesafe:config:1.4.0'
    implementation "com.github.pureconfig:pureconfig_$scalaToolsVersion:0.14.0"
    implementation 'commons-io:commons-io:2.4'
    implementation "com.johnsnowlabs.nlp:spark-nlp-spark24_$scalaToolsVersion:3.0.3"
    implementation 'com.lihaoyi:os-lib_3:0.7.8'

    //testImplementation "org.scalatest:scalatest_$scalaToolsVersion:3.2.0"
    //testImplementation 'junit:junit:4.13'
    //testImplementation "org.scalatestplus:junit-4-13_$scalaToolsVersion:3.2.2.0"
}

build.dependsOn(shadowJar)
distTar.dependsOn(shadowJar)

jar {
    manifest {
        attributes 'Git-Commit': getCommitHash()
    }
}

shadowJar {
    zip64 = true
    appendix = getCommitHash().substring(0, 7)
    classifier = 'fat'
    dependencies {
        exclude(dependency("org.apache.spark:spark-core_$scalaToolsVersion:$sparkVersion"))
        exclude(dependency("org.apache.spark:spark-mllib_$scalaToolsVersion:$sparkVersion"))
        exclude(dependency("org.apache.spark:spark-sql_$scalaToolsVersion:$sparkVersion"))
        exclude(dependency("org.apache.spark:spark-streaming_$scalaToolsVersion:$sparkVersion"))
        exclude(dependency("org.apache.spark:spark-graphx_$scalaToolsVersion:$sparkVersion"))
        exclude(dependency("org.apache.spark:spark-catalyst_$scalaToolsVersion:$sparkVersion"))
    }
}

distributions {
    main {
        contents {
            into('lib') {
                from shadowJar.outputs.files.singleFile
            }
            into('conf') {
                from "src/main/resources"
                include "application.conf"
                include "log4j.xml"
            }
            into('bin') {
                from 'src/main/bash'
                include '*.sh'
            }
        }
    }
}

testlogger {
    // use colors and Unicode symbols in tests
    theme 'mocha'
}

def getCommitHash() {
    if (findProperty('GIT_COMMIT')) {
        // from integration/CICD tool
        return findProperty('GIT_COMMIT').toString().trim()
    } else {
        // find out locally
        def hash = 'git rev-parse HEAD'.execute(null, projectDir)
        hash.waitFor()
        return hash.text.toString().trim()
    }
}